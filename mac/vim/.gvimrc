" set guifont=Monaco:h14
set guifont=Fira_Code:h18
set macligatures

" Plugins
" Vundle
set nocompatible              " required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
"Plugin 'VundleVim/Vundle.vim'

" add all your plugins here (note older versions of Vundle
" used Bundle instead of Plugin)
"
" [1] Colorscheme
	Plugin 'morhetz/gruvbox'
" [2] Airline
	Plugin 'vim-airline/vim-airline'
	Plugin 'vim-airline/vim-airline-themes'

" Plugin 'tmhedberg/SimpylFold'
" Plugin 'vim-scripts/indentpython.vim'
" Bundle 'Valloric/YouCompleteMe'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" Vim-plug
"call plug#begin('~/.vim/plugged')
"
"    " [1] Colorscheme
"    Plug 'morhetz/gruvbox'
"
"    " [2] Airline
"    Plug 'vim-airline/vim-airline'
"    Plug 'vim-airline/vim-airline-themes'
"
"call plug#end()

" Gruvbox
colorscheme gruvbox
let g:airline_theme='dark'
set background=dark
let g:gruvbox_contrast_light = 'hard'
let g:gruvbox_contrast_dark = 'medium'

" General
set number relativenumber		    " Show hybrid line numbers
augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

set linebreak				    " Break lines at word (requires Wrap lines)
set showbreak=+++			    " Wrap-broken line prefix
" set textwidth=100			    " Line wrap (number of cols)
set showmatch				    " Highlight matching brace
set visualbell				    " Use visual bell (no beeping)
 
" set hlsearch				    " Highlight all search results
" set smartcase				    " Enable smart-case search
" set ignorecase				    " Always case-insensitive
" set incsearch				    " Searches for strings incrementally
 
set autoindent				    " Auto-indent new lines
" set shiftwidth=4			    " Number of auto-indent spaces
" set smartindent				    " Enable smart-indent
" set smarttab				    	" Enable smart-tabs
" set softtabstop=4			    " Number of spaces per Tab
set list
set listchars=tab:│\ ,eol:↲
 
" Advanced
set ruler				    " Show row and column ruler information
 
set undolevels=1000			    " Number of undo levels
set backspace=indent,eol,start		    " Backspace behaviour

" Generated by BimConfig.com

" Templates
au BufNewFile ~/*.cpp 0r ~/.base.cpp	    " C++ template
au BufNewFile ~/*.c 0r ~/.base.c	    " C template
au BufNewFile ~/*.java 0r ~/.base.java	    " Java template

" Colors
syntax on
" color synthetic
" color contrastneed
" color sublimemonokai

" Macros
nmap <S-CR> <S-o><Esc>j
nmap <CR> o<Esc>k

" Folding options
set foldmethod=indent
set nofoldenable
set foldlevel=99

" Enable folding with the spacebar
nnoremap <space> za

" Try this if you want to see the docstrings for folded code
let g:SimpylFold_docstring_preview=1

" Split options
set splitbelow
set splitright

" Split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Identify bad white spaces
" au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" UTF-8 Support
set encoding=utf-8

" Completition options
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>


" Make vim clipboard = OS clipboard
set clipboard=unnamed
